@page "/login"

@inject AuthService Auth;
@inject NavigationManager Nav;
@inject AuthenticationStateProvider AuthProvider
@inject ISnackbar AlertMessenger
@using Nextended.Core.Extensions


<MudContainer Class="my-5" Style="max-width: 600px">
    <MudPaper>
        <MudCard Class="p-4 shadow">
            <MudCardContent Class="mx-5">
                <h3 class="font-monospace  pb-5">LOGIN</h3>
                <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">

                    <DataAnnotationsValidator />

                    <MudTextField Class="my-5 p-1"
                                  @bind-Value="_loginModel.Email"
                                  Label="Email"
                                  Variant="Variant.Text"
                                  For="() => _loginModel.Email" />

                    <MudTextField Class="my-5 p-1"
                                  @bind-Value="_loginModel.Password"
                                  Label="Password"
                                  Variant="Variant.Text"
                                  InputType="InputType.Password"
                                  For="() => _loginModel.Password" />


                    <MudButton Class="w-100 my-3"
                               ButtonType="ButtonType.Submit"
                               Color="Color.Info"
                               Variant="Variant.Filled">
                        Login
                    </MudButton>

                    <p class="pt-5">
                        If you don't account
                        <MudLink Href="singup"
                                 Color="Color.Secondary">
                            Register
                        </MudLink>
                    </p>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudPaper>
</MudContainer>


@code {

    private readonly UserLoginDto _loginModel = new();

    private async Task HandleLogin()
    {
        var value = await Auth.Login(_loginModel);

        if (value.StatusCode == 200)
        {
            Nav.NavigateTo("/");
            AlertMessenger.Add("Successfully get in!", Severity.Success);
        }
        else
        {
            AlertMessenger.Add(value.ExceptionMessage, Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        if (!state.User.Claims.IsEmpty()) Nav.NavigateTo("/");
    }

}

<CustomBackground Color1="#0099b5" Color2="#003594" />