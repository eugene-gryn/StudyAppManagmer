@inject AuthService Auth;
@inject NavigationManager Nav;
@inject AuthenticationStateProvider AuthProvider;
@inject StudlyApiBaseService Service;
@inject ISnackbar AlertMessenger
@using System.Net
@inherits ComponentBase

<MudPaper Elevation="3" Class="p-4 w-100">
    <p class="fw-bold fs-4">Profile RAW</p>
    <hr/>
    @if (_user != null)
    {
        <MudForm>
            <MudTextField
                Variant="Variant.Text"
                Label="Name"
                Disabled="true"
                Value="_user.Name"/>
            <MudTextField
                Variant="Variant.Text"
                Label="Email"
                Disabled="true"
                Value="_user.Email"/>

            <div class="my-5 p-3 border-1 rounded">
                <MudTextField
                    Variant="Variant.Outlined"
                    Label="Password change"
                    Type="InputType.Password"
                    Placeholder="Old password"
                    Value="_passwords.OldPassword"/>
                <MudTextField
                    Variant="Variant.Outlined"
                    Type="InputType.Password"
                    Placeholder="New password"
                    Value="_passwords.Password"/>
                <MudTextField
                    Variant="Variant.Outlined"
                    Type="InputType.Password"
                    Placeholder="Repeat password"
                    Value="_passwords.Password2"/>
                <MudButton
                    OnClick="ProcessChangePass"
                    Class="my-3"
                    FullWidth="true"
                    Color="Color.Primary"
                    Variant="Variant.Text">
                    Change password
                </MudButton>
            </div>

            <div>
                <MudButton
                    OnClick="ProcessLogout"
                    Class="my-2"
                    FullWidth="true"
                    Color="Color.Warning"
                    Variant="Variant.Text"
                    Href="/login">
                    Logout
                </MudButton>
            </div>
        </MudForm>

    }
</MudPaper>

@code
{
    UserDTO? _user;

    PasswordUpdateDto _passwords = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _user = await Service.GetUserData();
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.Unauthorized)
            {
                AlertMessenger.Add("You need to log back in!", Severity.Warning);

                await Auth.Logout();

                Nav.NavigateTo("/login");
            }
        }

    }



    private async Task ProcessLogout()
    {
        var response = await Auth.Logout();

        if (response.StatusCode == 200)
        {
            AlertMessenger.Add("Successful account logout", Severity.Success);
        }

        Nav.NavigateTo("/login");

    }

    private Task ProcessChangePass()
    {
        return Task.CompletedTask;
    }
}