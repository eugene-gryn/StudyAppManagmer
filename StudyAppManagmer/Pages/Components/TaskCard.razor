@inject IDialogService EditDialogService
@using APIServiceLayer.Models.Tasks
@inherits ComponentBase


@if (TaskView == ShortView.Card)
{
    @if (TaskObject != null)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <div class="d-flex justify-content-around align-items-center mb-3 flex-wrap">
                        <div class="align-items-center p-1 px-2 rounded-3 @(ChooseBgDependingOnPriority()) text-black">
                            <MudText> @($"{TaskObject.Priority} {TaskDto.PriorityStringView(TaskObject.Priority)}") </MudText>
                        </div>
                        <div class="align-items-center p-1 px-2 rounded-3 @(ChooseBgDependingOnStatus()) text-black">
                            <MudText Class="">@TaskDto.StatusStringView(TaskObject.Status)</MudText>
                        </div>
                    </div>
                    <div class="d-flex p-2 rounded-2 align-items-center">
                        <MudText Class="mr-5">@(TaskObject.GetPercentageOfDoneTasks())%</MudText>
                        <MudProgressLinear Style="min-width: 50px;" Color="Color.Primary" Value="@(TaskObject.GetPercentageOfDoneTasks())"/>
                    </div>
                    <MudText Typo="Typo.h5" Class="my-2">@TaskObject.Title</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <ShortTaskOperationMenuComponent
                        TaskObject="TaskObject"
                        OnBeginTimeCountingClick="TaskBeginCounting"
                        OnDeleteTaskClick="TaskDeleteOperation"
                        OnChangeStatusTaskById="ChangeStatusCodeOfTask"/>
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>
                <MudText>@DescriptionLimitDetails(50, TaskObject.Description)</MudText>
            </MudCardContent>

            <MudCardActions Class="d-flex justify-content-between">

                <ChangeDatePicker TaskObject="TaskObject" OnTaskDueDateChanged="RescheduleTaskDue"/>
                <ShortSubtaskViewComponent TaskObject="TaskObject" OnChangeSubtaskStatus="tuple => OnChangeSubtaskStatus(tuple.Item1, tuple.Item2)"/>

            </MudCardActions>
        </MudCard>
    }
}
@if (TaskView == ShortView.List)
{
    @if (TaskObject != null)
    {
        <MudPaper>
            <div class="d-flex justify-content-between border-2 rounded border-light p-2 align-items-center flex-wrap">
                <div class="">
                    <div style="height:auto; width:auto; display: inline-block;"
                         class="align-items-centerm mb-2 mx-2 p-1 px-2 rounded-3 @(ChooseBgDependingOnStatus()) text-black">
                        <MudText Class="pe-none">@TaskDto.StatusStringView(TaskObject.Status)</MudText>
                    </div>

                    <div class="d-flex">
                        <div style="height:auto; width:auto; display: inline-block;"
                             class="mx-2 p-1 px-2 rounded-3 @(ChooseBgDependingOnPriority()) text-black">
                            <MudTooltip
                                Text="@TaskDto.PriorityStringView(TaskObject.Priority)">
                                <MudText Class="pe-none"> @($"{TaskObject.Priority}") </MudText>
                            </MudTooltip>
                        </div>
                        <MudTooltip 
                            Text="@DescriptionLimitDetails(50, TaskObject.Description)"
                            Placement="Placement.Right">
                            <MudText Class="pe-none" Typo="Typo.h6">@TaskObject.Title</MudText>
                        </MudTooltip>
                    </div>
                </div>
                <div class="d-flex align-items-center">
                    <MudTooltip Text="Task reshedule">
                        <ChangeDatePicker TaskObject="TaskObject" OnTaskDueDateChanged="RescheduleTaskDue"/>
                    </MudTooltip>
                    
                    <MudTooltip Text="Subtask short view">
                        <ShortSubtaskViewComponent
                            TaskObject="TaskObject"
                            IsVisibleProgressBar="true"
                            OnChangeSubtaskStatus="tuple => OnChangeSubtaskStatus(tuple.Item1, tuple.Item2)"/>
                    </MudTooltip>

                    <MudTooltip Text="Other operations..">
                        <ShortTaskOperationMenuComponent
                            TaskObject="TaskObject"
                            OnBeginTimeCountingClick="TaskBeginCounting"
                            OnDeleteTaskClick="TaskDeleteOperation"
                            OnChangeStatusTaskById="ChangeStatusCodeOfTask"
                            OnClickEditTaskPage="OpenTaskEditDialog"/>
                    </MudTooltip>
                </div>
            </div>
        </MudPaper>

    }
}

@code {

    // Parameters setting for view TaskObject cards and get info
    [Parameter]
    public required TaskDto? TaskObject { get; set; }

    [Parameter]
    public ShortView TaskView { get; set; } = ShortView.Card;


    // Limits description count of characters and ads in end "..."
    private string DescriptionLimitDetails(int countSymbols, string text)
    {
        return new string(text.ToArray().Take(countSymbols).ToArray()) + "...";
    }

    private string ChooseBgDependingOnPriority()
    {
        return TaskObject.Priority switch
        {
            var n when n == 1 || n == 2 => "bg-danger text-white",
            3 => "bg-info text-white",
            var n when n == 4 || n == 5 => "bg-light",
            _ => ""
            };
    }

    private string ChooseBgDependingOnStatus()
    {
        return TaskObject.Status switch
        {
            0 => "bg-success text-white",
            1 => "bg-warning",
            2 => "bg-dark text-white",
            _ => ""
            };
    }


    private async Task OpenTaskEditDialog()
    {
        var parameter = new DialogParameters<DetailsInfoTaskDialogComponent> { { x => x.TaskModel, TaskObject } };

        var dialog = await EditDialogService.ShowAsync<DetailsInfoTaskDialogComponent>("Edit task", parameter, new DialogOptions()
        {
            DisableBackdropClick = true
        });

        var result = await dialog.Result;

        if (result.Canceled)
        {
            // TODO Connect to API
            Console.WriteLine("Some things to update data from back!");
        }
    }

}