@using APIServiceLayer.Models.Tasks
@using System.ComponentModel.DataAnnotations

@inherits ComponentBase

@if (TaskView == ShortView.Card)
{
    <MudCard Style="max-width: 420px">
        <MudCardHeader>
            <CardHeaderContent>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="align-items-center p-1 px-2 rounded-3 @(ChooseBgDependingOnPriority()) text-black">
                        <MudText> @($"{TaskObject.Priority} {TaskObject.PriorityStringView()}") </MudText>
                    </div>
                    <div class="align-items-center p-1 px-2 rounded-3 @(ChooseBgDependingOnStatus()) text-black">
                        <MudText Class="">@TaskObject.StatusStringView()</MudText>
                    </div>
                    <div class="d-flex p-2 rounded-2 align-items-center">
                        <MudText Class="mr-5">@(TaskObject.GetPercentageOfDoneTasks())%</MudText>
                        <MudProgressLinear Style="min-width: 50px;" Color="Color.Primary" Value="@(TaskObject.GetPercentageOfDoneTasks())"/>
                    </div>
                </div>
                <MudText Typo="Typo.h5" Class="my-2">@TaskObject.Title</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <ShortTaskOperationMenuComponent 
                    TaskObject="TaskObject" 
                    OnBeginTimeCountingClick="TaskBeginCounting" 
                    OnDeleteTaskClick="TaskDeleteOperation" />
            </CardHeaderActions>
        </MudCardHeader>

        <MudCardContent>
            <MudText>@DescriptionLimitDetails(50, TaskObject.Description)</MudText>
        </MudCardContent>

        <MudCardActions Class="d-flex justify-content-between">
            
            <ChangeDatePicker TaskObject="TaskObject" OnTaskDueDateChanged="RescheduleTaskDue" />
            <ShortSubtaskViewComponent TaskObject="TaskObject" OnChangeSubtaskStatus="tuple => OnChangeSubtaskStatus(tuple.Item1, tuple.Item2)" />

        </MudCardActions>
    </MudCard>
}
@if (TaskView == ShortView.List)
{
    @if (!IsCreationForm)
    {
        <div class="d-flex justify-content-between border-2 rounded border-light p-2 align-items-center">
            <div>
                <div style="height:auto; width:auto; display: inline-block;"
                     class="align-items-centerm mb-2 mx-2 p-1 px-2 rounded-3 @(ChooseBgDependingOnStatus()) text-black">
                    <MudText Class="">@TaskObject.StatusStringView()</MudText>
                </div>

                <div class="d-flex">
                    <div class="mx-2 p-1 px-2 rounded-3 @(ChooseBgDependingOnPriority()) text-black">
                        <MudText> @($"{TaskObject.Priority}") </MudText>
                    </div>
                    <MudText Typo="Typo.h5">@TaskObject.Title</MudText>
                </div>
            </div>
            <div class="d-flex align-items-center">

                <ChangeDatePicker TaskObject="TaskObject" OnTaskDueDateChanged="RescheduleTaskDue" />

                <ShortSubtaskViewComponent TaskObject="TaskObject" OnChangeSubtaskStatus="tuple => OnChangeSubtaskStatus(tuple.Item1, tuple.Item2)" />

                <ShortTaskOperationMenuComponent 
                    TaskObject="TaskObject" 
                    OnBeginTimeCountingClick="TaskBeginCounting" 
                    OnDeleteTaskClick="TaskDeleteOperation" />
            </div>
        </div>
    }

}

@code {

    // Parameters setting for view TaskObject cards and get info
    [Required, Parameter]
    public required TaskDto TaskObject { get; set; }

    [Parameter]
    public ShortView TaskView { get; set; } = ShortView.Card;

    [Parameter]
    public bool IsCreationForm { get; set; } = false;



    // Limits description count of characters and ads in end "..."
    private string DescriptionLimitDetails(int countSymbols, string text)
    {
        return new string(text.Take(countSymbols).ToArray()) + "...";
    }

    private string ChooseBgDependingOnPriority()
    {
        return TaskObject.Priority switch
        {
            var n when n == 1 || n == 2 => "bg-danger text-white",
            3 => "bg-info text-white",
            var n when n == 4 || n == 5 => "bg-light",
            _ => ""
            };
    }

    private string ChooseBgDependingOnStatus()
    {
        return TaskObject.Status switch
        {
            0 => "bg-success text-white",
            1 => "bg-warning",
            2 => "bg-dark text-white",
            _ => ""
            };
    }



}