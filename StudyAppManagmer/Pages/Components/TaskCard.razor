@using APIServiceLayer.Models.Tasks
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inherits ComponentBase

@if (View == ShortView.Card)
{
    <MudCard Style="max-width: 400px">
        <MudCardHeader>
            <CardHeaderContent>
                <div class="d-flex justify-content-between mb-3">
                    <div class="p-1 px-2 rounded-3 @(ChooseBgDependingOnPriority()) text-black">
                        <MudText> @($"{TaskObject.Priority} {TaskObject.PriorityStringView()}") </MudText>
                    </div>
                    <div class="p-1 px-2 rounded-3 @(ChooseBgDependingOnStatus()) text-black">
                        <MudText Class="">@TaskObject.StatusStringView()</MudText>
                    </div>
                    <MudText Class="mr-5">@(TaskObject.GetPercentageOfDoneTasks())%</MudText>
                </div>
                <MudText Typo="Typo.h5" Class="my-2">@TaskObject.Title</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.MoreVert"></MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>

        <MudCardContent>
            <MudText>@DescriptionLimitDetails(50, TaskObject.Description)</MudText>
        </MudCardContent>

        <MudCardActions Class="d-flex justify-content-between">
            <MudButton
                @ref="_changeDueDateButtonAnchor"
                OnClick="@(e => SetRescheduleTaskPopoverVisibility(true))"
                StartIcon="@Icons.Material.Filled.DateRange">
                Due: @TaskObject.GetDeadlineInStringView()
                <MudPopover
                    AnchorOrigin="Origin.BottomRight"
                    Open="_isPopoverChangeDueDateVisible"
                    Fixed="true"
                    AnchorRef="@_changeDueDateButtonAnchor">
                    <div class="p-3">
                        <div class="d-flex justify-content-between m-2">
                            <MudButton OnClick="() => _tempTaskChangeDueDate = DateTime.Now.Date">Today</MudButton>
                            <MudButton OnClick="() => _tempTaskChangeDueDate = DateTime.Now.Date.AddDays(1)">Tomorrow</MudButton>
                            <MudButton OnClick="() => _tempTaskChangeDueDate = DateTime.Now.Date.AddDays(7)">Next week</MudButton>
                        </div>
                        <MudDatePicker
                            Style="max-width: 150px"
                            DateFormat="dd MMM"
                            Variant="Variant.Outlined"
                            Placeholder="@TaskObject.GetDeadlineInStringView()"
                            IsDateDisabledFunc="time => time.Date < DateTime.Today"
                            @bind-Date="_tempTaskChangeDueDate"
                            PickerVariant="PickerVariant.Static"/>
                        <div class="d-flex justify-content-between mx-2">
                            <MudButton OnClick="CancelAndCloseFormRescheduleTaskDue" Variant="Variant.Outlined" Color="Color.Error">Cancel</MudButton>
                            <MudButton OnClick="RescheduleTaskDue" Variant="Variant.Outlined" Color="Color.Success">Submit</MudButton>
                        </div>
                    </div>
                </MudPopover>
            </MudButton>


            <MudButton
                @ref="_subtasksShortViewAnchor"
                StartIcon="@Icons.Material.Filled.Subject"
                OnClick="() => SetShortViewSubtasksVisibility(true)">
                Sub: @(TaskObject.SubTasks.Count)
                <MudPopover
                    Class="p-3"
                    AnchorOrigin="Origin.BottomRight"
                    Open="_isPopoverShortViewSubtasksVisible"
                    Fixed="true"
                    AnchorRef="@_subtasksShortViewAnchor">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.h5">Sub tasks</MudText>
                        @foreach (var subtask in TaskObject.SubTasks.OrderByDescending(st => st.Status).ThenBy(sb => sb.Title))
                        {
                            <div>
                                <MudCheckBox
                                    UnCheckedColor="Color.Error"
                                    Color="Color.Success"
                                    Checked="subtask.GetBoolStatus()"
                                    CheckedChanged="b => OnChangeSubtaskStatus(b, subtask)"
                                    Label="@subtask.Title"
                                    T="bool"
                                    TriState="true"/>
                                <hr class="my-1">
                            </div>
                        }
                    </div>
                    <div class="mt-2">
                        <MudButton OnClick="() => SetShortViewSubtasksVisibility(false)" Variant="Variant.Outlined" Color="Color.Error">Close</MudButton>
                    </div>
                </MudPopover>


            </MudButton>
        </MudCardActions>
    </MudCard>
}


@code {

    // Parameters setting for view TaskObject cards and get info
    [Parameter]
    public required TaskDto TaskObject { get; set; }

    [Parameter]
    public ShortView View { get; set; } = ShortView.Card;

    // Variables to service due date change popover
    private DateTime? _tempTaskChangeDueDate;
    private bool _isPopoverChangeDueDateVisible;
    private MudButton? _changeDueDateButtonAnchor;

    // Variables to service short view of subtasks
    private MudButton? _subtasksShortViewAnchor;
    private bool _isPopoverShortViewSubtasksVisible;


    protected override Task OnInitializedAsync()
    {
        _tempTaskChangeDueDate = TaskObject.Deadline;
        return base.OnInitializedAsync();
    }

    private Task CancelAndCloseFormRescheduleTaskDue()
    {
        _tempTaskChangeDueDate = TaskObject.Deadline;
        SetRescheduleTaskPopoverVisibility(false);
        return Task.CompletedTask;
    }

    // Limits description count of characters and ads in end "..."
    private string DescriptionLimitDetails(int countSymbols, string text)
    {
        return new string(text.Take(countSymbols).ToArray()) + "...";
    }

    private string ChooseBgDependingOnPriority()
    {
        return TaskObject.Priority switch
        {
            var n when (n == 1 || n == 2) => "bg-danger text-white",
            3 => "bg-info text-white",
            var n when (n == 4 || n == 5) => "bg-light",
            _ => ""
        };

    }

    private string ChooseBgDependingOnStatus()
    {
        return TaskObject.Status switch
        {
            0 => "bg-success text-white",
            1 => "bg-warning",
            2 => "bg-dark text-white",
            _ => ""
        };

    }

    private void SetRescheduleTaskPopoverVisibility(bool value)
    {
        _isPopoverChangeDueDateVisible = value;
    }

    private void SetShortViewSubtasksVisibility(bool value)
    {
        _isPopoverShortViewSubtasksVisible = value;
    }

}